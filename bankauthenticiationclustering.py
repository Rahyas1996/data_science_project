# -*- coding: utf-8 -*-
"""bankauthenticiationclustering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19TPXwpr_CPnvHInE0W3nuqmToDo3UKSL
"""

import numpy as np
	import pandas as pd
	import matplotlib.pyplot as plt
	import seaborn as sb


	#load data
	df = pd.read_csv('data_with_labels.csv')


	plt.figure(figsize = [7, 7])
	plt.scatter(df.V1, df.V2);
from sklearn.datasets.samples_generator import (make_blobs,
                                                     	                                           make_circles,
	                                                make_moons)
	from sklearn.cluster import KMeans, SpectralClustering


	data = np.column_stack(( df.V1, df.V2))  # we use only V1 and V2


	# compute K-Means
	km_res = KMeans(n_clusters = 2).fit(data)
	clusters = km_res.cluster_centers_


	# put the assigned labels to the original dataset
	df['KMeans'] = km_res.labels_


	#plot out the result
	g = sb.FacetGrid(data = df, hue = 'KMeans', size = 5)
	g.map(plt.scatter, 'V1', 'V2')
	g.add_legend();
	plt.scatter(clusters[:,0], clusters[:,1], s=500, marker='*', c='r')

from sklearn.datasets.samples_generator import (make_blobs,
	                                                make_circles,
	                                                make_moons)
	from sklearn.cluster import KMeans, SpectralClustering


	n_iter = 9
	fig, ax = plt.subplots(3, 3, figsize=(16, 16))
	ax = np.ravel(ax)
	centers = []
	for i in range(n_iter):
	    # Run local implementation of kmeans
	    km = KMeans(n_clusters=2,
	                max_iter=3)
	    km.fit(data)
	    centroids = km.cluster_centers_
	    centers.append(centroids)
	    ax[i].scatter(data[km.labels_ == 0, 0], data[km.labels_ == 0, 1],
	                   label='cluster 1')
	    ax[i].scatter(data[km.labels_ == 1, 0], data[km.labels_ == 1, 1],
	                   label='cluster 2')
	    ax[i].scatter(centroids[:, 0], centroids[:, 1],
	                  c='r', marker='*', s=300, label='centroid')
	    ax[i].legend(loc='lower right')
	    ax[i].set_aspect('equal')
	plt.tight_layout();
df.groupby('KMeans').describe()